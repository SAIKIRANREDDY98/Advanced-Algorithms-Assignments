#include <iostream>
#include <string>
#include <cstring>
using namespace std;
string findLongestCommonSubstring(string str1, string str2, int m, int n)
{
    int maxLen = 0;         
    int endIndex = m;    
    int dp[m + 1][n + 1];

    memset(dp, 0, sizeof(dp));

 
    for (int i = 1; i <= m; i++)
    {
        for (int j = 1; j <= n; j++)
        {
      
            if (str1[i - 1] == str2[j - 1])
            {
                dp[i][j] = dp[i - 1][j - 1] + 1;

                if (dp[i][j] > maxLen)
                {
                    maxLen = dp[i][j];
                    endIndex = i;
                }
            }
        }
    }

    cout << "Dynamically Growing Table:" << endl;
    for (int i = 0; i <= m; i++) {
        for (int j = 0; j <= n; j++) {
            cout << dp[i][j] << " ";
        }
        cout << endl;
    }

    cout << "The longest common substring(s) with length " << maxLen << " is/are:" << endl;
    cout << str1.substr(endIndex - maxLen, maxLen) << endl;

    return str1.substr(endIndex - maxLen, maxLen);
}

int main()
{
    string str1 = "ABAB", str2 = "BABA";
    int m = str1.length(), n = str2.length();
    findLongestCommonSubstring(str1, str2, m, n);
    return 0;
}
